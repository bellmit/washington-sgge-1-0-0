
war_WSImpl = function (teste,bar,local){

var text = '/** create by system gera-java version 1.0.0 '+dataAtualFormatada()+'*/\n';
text = text + '\n';
text = text + 'package com.qat.samples.sysmgmt.service.impl;\n';
text = text + '\n';
text = text + 'import javax.jws.WebService;\n';
text = text + '\n';
text = text + 'import org.slf4j.Logger;\n';
text = text + 'import org.slf4j.LoggerFactory;\n';
text = text + 'import org.springframework.stereotype.Service;\n';
text = text + '\n';
text = text + 'import com.qat.framework.model.response.InternalResultsResponse;\n';
text = text + 'import com.qat.framework.util.ResponseHandler;\n';
text = text + 'import com.qat.samples.sysmgmt.bac.I'+bar+'BAC;\n';
text = text + 'import com.qat.samples.sysmgmt.model.'+bar+';\n';
text = text + 'import com.qat.samples.sysmgmt.model.request.'+bar+'MaintenanceRequest;\n';
text = text + 'import com.qat.samples.sysmgmt.model.response.'+bar+'Response;\n';
text = text + 'import com.qat.samples.sysmgmt.util.model.request.FetchAllRequest;\n';
text = text + 'import com.qat.samples.sysmgmt.util.model.request.FetchByIdRequest;\n';
text = text + 'import com.qat.samples.sysmgmt.util.model.request.'+bar+'InquiryRequest;\n';
text = text + 'import com.qat.samples.sysmgmt.util.model.request.RefreshRequest;\n';
text = text + '\n';
text = text + '/**\n';
text = text + ' * Standard implementation of a web service where the operations are delegated to a BAC.\n';
text = text + ' * Note the BAC is injected by Spring.\n';
text = text + ' */\n';
text = text + '@Service\n';
text = text + '@WebService(targetNamespace = "http://qat.com/sysmgmt")\n';
text = text + 'public class '+bar+'WSImpl implements com.qat.samples.sysmgmt.service.I'+bar+'WS\n';
text = text + '{\n';
text = text + '	/** The Constant DEFAULT_EXCEPTION_MSG. */\n';
text = text + '	private static final String DEFAULT_EXCEPTION_MSG = "sysmgmt.base.'+bar.toLowerCase()+'wsimpl.defaultexception";\n';
text = text + '\n';
text = text + '	/** The Constant DEFAULT_EXCEPTION_MSG. */\n';
text = text + '	private static final String DEFAULT_ERROR_MSG = "sysmgmt.base.'+bar.toLowerCase()+'wsimpl.defaulterror";\n';
text = text + '\n';
text = text + '	/** The Constant CLASS_NAME. */\n';
text = text + '	private static final String CLASS_NAME = '+bar+'WSImpl.class.getName();\n';
text = text + '\n';
text = text + '	/** The Constant LOG. */\n';
text = text + '	private static final Logger LOG = LoggerFactory.getLogger('+bar+'WSImpl.class);\n';
text = text + '\n';
text = text + '	/** The '+bar.toLowerCase()+' BAC. */\n';
text = text + '	private I'+bar+'BAC '+bar.toLowerCase()+'BAC; // injected by Spring through setter\n';
text = text + '\n';
text = text + '	/**\n';
text = text + '	 * Spring Sets the '+bar.toLowerCase()+' BAC.\n';
text = text + '	 *\n';
text = text + '	 * @param '+bar.toLowerCase()+'BAC the new '+bar.toLowerCase()+' BAC\n';
text = text + '	 */\n';
text = text + '	public void set'+bar+'BAC(I'+bar+'BAC '+bar.toLowerCase()+'BAC)\n';
text = text + '	{\n';
text = text + '		this.'+bar.toLowerCase()+'BAC = '+bar.toLowerCase()+'BAC;\n';
text = text + '	}\n';
text = text + '\n';
text = text + '	/**\n';
text = text + '	 * Gets the '+bar.toLowerCase()+' bac.\n';
text = text + '	 *\n';
text = text + '	 * @return the '+bar.toLowerCase()+' bac\n';
text = text + '	 */\n';
text = text + '	public I'+bar+'BAC get'+bar+'BAC()\n';
text = text + '	{\n';
text = text + '		return '+bar.toLowerCase()+'BAC;\n';
text = text + '	}\n';
text = text + '\n';

for(i=0;i < teste.length;i++){

	var nome = teste[i].classe.toLowerCase();
	nomeM = titleize(teste[i].classe)
	text = text + "\n";
	text = text + '//===================================### '+nomeM.toUpperCase()+' ####======================================\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response insert'+nomeM+'('+nomeM+'MaintenanceRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().insert'+nomeM+'(request);\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response update'+nomeM+'('+nomeM+'MaintenanceRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().update'+nomeM+'(request);\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response delete'+nomeM+'('+nomeM+'MaintenanceRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().delete'+nomeM+'(request);\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response refresh'+nomeM+'s(RefreshRequest request)\n';
	text = text + '	{\n';
	text = text + '		// This method is demo code only. Do not view this as a QAT Global Standard.\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().refresh'+nomeM+'s(request);\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response fetchAll'+nomeM+'s(FetchAllRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().fetchAll'+nomeM+'s();\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	/*\n';
	text = text + '	 * (non-Javadoc)\n';
	text = text + '	 * @see com.qat.samples.sysmgmt.dapi.impl.I'+nomeM+'WS#fetch'+nomeM+'ById(com.qat.samples.sysmgmt.model.request.\n';
	text = text + '	 * FetchByIdRequest)\n';
	text = text + '	 */\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response fetch'+nomeM+'ById(FetchByIdRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = new InternalResultsResponse<'+nomeM+'>();\n';
	text = text + '\n';
	text = text + '			internalResponse = get'+nomeM+'BAC().fetch'+nomeM+'ById(request);\n';
	text = text + '			// Handle the processing for all previous methods regardless of them failing or succeeding.\n';
	text = text + '			ResponseHandler.handleOperationStatusAndMessages(response, internalResponse, true);\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
	text = text + '\n';
	text = text + '	@Override\n';
	text = text + '	public '+nomeM+'Response fetch'+nomeM+'sByRequest('+nomeM+'InquiryRequest request)\n';
	text = text + '	{\n';
	text = text + '		'+nomeM+'Response response = new '+nomeM+'Response();\n';
	text = text + '\n';
	text = text + '		try\n';
	text = text + '		{\n';
	text = text + '			InternalResultsResponse<'+nomeM+'> internalResponse = get'+nomeM+'BAC().fetch'+nomeM+'sByRequest(request);\n';
	text = text + '			ResponseHandler.populateResponse(response, internalResponse, DEFAULT_ERROR_MSG, request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '		catch (Exception ex)\n';
	text = text + '		{\n';
	text = text + '			ResponseHandler.handleException(LOG, response, ex, DEFAULT_EXCEPTION_MSG, new Object[] {CLASS_NAME},\n';
	text = text + '					request.getRequestContext());\n';
	text = text + '		}\n';
	text = text + '\n';
	text = text + '		return response;\n';
	text = text + '	}\n';
}
text = text + '}\n';


return text;
}
